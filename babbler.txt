This file babbler.txt in my babbler repositoryis a log of what I learned by stepping through the moooseframeworkTutorial 1: Application Development4/25/2023TBegin moose tutorial 1: App DevelopmentThe tutorial has 10 steps, so will take a few days.Some acronyms I didn't know:AD	automatic differentiationBVP	boundary value problemHIT	Hierarchical Input TextQP	quadrature point% ./moose/scripts/stork.sh BabblerInitialized minimal Git repository in /Users/rogerfrye/Documents/Git/babbler/.git/% git remote add origin https://github.com/rfryeSigma/babbler        (base) rogerfrye@Rogers-Laptop babbler % git commit -m "initial commit"(base) rogerfrye@Rogers-Laptop babbler % git push -u origin mainUsername for 'https://github.com': rfryeSigmaPassword for 'https://rfryeSigma@github.com': remote: Support for password authentication was removed on August 13, 2021.Failed.Instead rename folder to temp; clone babbler; fill in from temp including .clang_format;git add *; commit and push; and rmdir temp.4/27/2023Rbabbler % make -j4/bin/sh: /Users/rogerfrye/Documents/Git/moose/libmesh/installed/contrib/bin/libmesh-config: No such file or directory/bin/sh: /Users/rogerfrye/Documents/Git/moose/libmesh/installed/libtool: No such file or directorymake: *** [/Users/rogerfrye/Documents/Git/moose/framework/build/unity_src/mesh_Unity..opt.lo] Error 127babbler % mamba activate ~/mambaforge3/envs/moose(moose) rogerfrye@Rogers-Laptop babbler % make -j8Compiling C++ (in opt mode) /Users/rogerfrye/Documents/Git/moose/framework/build/unity_src/src_Unity.C...Compiling C++ with suffix (in opt mode) /Users/rogerfrye/Documents/Git/moose/modules/module_loader/src/ModulesApp.C...Compiling C++ (in opt mode) /Users/rogerfrye/Documents/Git/babbler/src/base/BabblerApp.C...Compiling C++ (in opt mode) /Users/rogerfrye/Documents/Git/babbler/src/main.C...Compiling C++ (in opt mode) /Users/rogerfrye/Documents/Git/babbler/test/src/base/BabblerTestApp.C...Linking Library /Users/rogerfrye/Documents/Git/moose/framework/libmoose-opt.la...ld: warning: direct access in function 'DivergenceAuxTempl<false>::DivergenceAuxTempl(InputParameters const&)' from file '/Users/rogerfrye/Documents/Git/moose/framework/build/unity_src/.libs/auxkernels_Unity.arm64-apple-darwin20.0.0.opt.o' to global weak symbol 'typeinfo for MooseVariableFE<double>' from file '/Users/rogerfrye/Documents/Git/moose/framework/build/unity_src/.libs/variables_Unity.arm64-apple-darwin20.0.0.opt.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings....many many pages of warnings...Linking Library /Users/rogerfrye/Documents/Git/moose/modules/module_loader/lib/libmodule_loader_with-opt.la...Linking Library /Users/rogerfrye/Documents/Git/babbler/lib/libbabbler-opt.la...Linking Library /Users/rogerfrye/Documents/Git/babbler/test/lib/libbabbler_test-opt.la...Linking Executable /Users/rogerfrye/Documents/Git/babbler/babbler-opt...-rwxr-xr-x   1 rogerfrye  staff  85848 Apr 27 15:39 babbler-opt(moose) rogerfrye@Rogers-Laptop babbler % ./run_tests -j4test:kernels/simple_diffusion.test ........................................................................ OK--------------------------------------------------------------------------------------------------------------Ran 1 tests in 1.5 seconds. Average test time 1.2 seconds, maximum test time 1.2 seconds.1 passed, 0 skipped, 0 pending, 0 failed% ./babbler-opt -i test/tests/kernels/simple_diffusion/simple_diffusion.i... 1 Nonlinear |R| = 1.373820e-06      0 Linear |R| = 1.373820e-06      1 Linear |R| = 3.507042e-08      2 Linear |R| = 4.049790e-10      3 Linear |R| = 1.351614e-11 2 Nonlinear |R| = 1.351534e-11 Solve Converged!-rw-r--r--  1 rogerfrye  staff    523 Apr 25 11:18 simple_diffusion.i-rw-r--r--  1 rogerfrye  staff  38480 Apr 27 16:03 simple_diffusion_out.esimple_diffusion % ~/Documents/Git/moose/python/peacock/peacock -i simple_diffusion.i     from PyQt5 import QtCoreModuleNotFoundError: No module named 'PyQt5'(moose) rogerfrye@Rogers-Laptop libmesh % conda install pyqt5 PackagesNotFoundError: The following packages are not available from current channels:(moose) rogerfrye@Rogers-Laptop libmesh % pip install pyqt5  error: subprocess-exited-with-error(moose) rogerfrye@Rogers-Laptop ~ % mamba deactivate% ./mambaforge3/bin/mamba init% ./mambaforge3/bin/mamba create -n peacock moose-peacock python=3.10(base) rogerfrye@Rogers-Laptop ~ % conda info --envs# conda environments:#                         /Users/rogerfrye/mambaforge3/envs/moose                         /Users/rogerfrye/mambaforge3/envs/peacockbase                  *  /Users/rogerfrye/opt/anaconda3/anaconda3(base) rogerfrye@Rogers-Laptop ~ % mamba activate ~/mambaforge3/envs/peacock (peacock) rogerfrye@Rogers-Laptop ~ % cd Documents/Git/babbler/test/tests/kernels/simple_diffusion (peacock) rogerfrye@Rogers-Laptop simple_diffusion % ~/Documents/Git/moose/python/peacock/peacock -i simple_diffusion.ipops up window, showing initial gridExecute RunExodus filenames: ['peacock_run_exe_tmp_simple_diffusion_out.e']Postprocessor filenames: ['peacock_run_exe_tmp_simple_diffusion_out.csv']shows a smooth heatmap from blue 0 on left to red 1 on right.whereas Paraview viewing u shows flat blue for    simple_diffusion_out.eand for    peacock_run_exe_tmp_simple_diffusion_out.e4/28/2023Fgit add, commit, push running version of babbler.Before continuing with moose tutorial 1, step 2, review what I have learned.    Begin new moose application with % ./moose/scripts/stork.sh Babbler    The Makefile lets you select modules.    Must activate moose before make: % mamba activate ~/mambaforge3/envs/moose    Must deactivate to create peacock: % mamba deactivate    % ./mambaforge3/bin/mamba init    % ./mambaforge3/bin/mamba create -n peacock moose-peacock python=3.10    List envs with % conda info --envs    % mamba activate ~/mambaforge3/envs/peacock    % ~/Documents/Git/moose/python/peacock/peacock -i simple_diffusion.i    Diffusion.C computes residual: _grad_u[_qp] * _grad_test[_i][_qp];    and Jacobian: _grad_phi[_j][_qp] * _grad_test[_i][_qp];     p arams.addClassDescription("The Laplacian operator ($-\\nabla \\cdot \\nabla u$), with the weak "                                 "form of $(\\nabla \\phi_i, \\nabla u_h)$.");    Solves steady state, so doesn't need rate from material.Flesh out problems/pressure_diffusion.iADDiffusion Jacobian is computed using forward automatic differentiationprecomputes residual; _grad_u[_qp];(base) rogerfrye@Rogers-Laptop problems % ../babbler-opt -i pressure_diffusion.i*** ERROR ***/Users/rogerfrye/Documents/Git/babbler/problems/pressure_diffusion.i contains Windows(DOS) line endings which are not supported.I am using the Spyder IDE on my Apple M1 laptop. Why would it have Windows format?Wouldn't accept Mac format either. Had to use Linux.0 Nonlinear |R| = 9.589189e+02      0 Linear |R| = 9.589189e+02      1 Linear |R| = 4.437909e+01      2 Linear |R| = 1.208598e+00      3 Linear |R| = 4.488848e-02      4 Linear |R| = 3.043818e-03 1 Nonlinear |R| = 3.043818e-03      0 Linear |R| = 3.043818e-03      1 Linear |R| = 2.152425e-04      2 Linear |R| = 1.775675e-05      3 Linear |R| = 8.116262e-07      4 Linear |R| = 6.354141e-08      5 Linear |R| = 3.106664e-09 2 Nonlinear |R| = 3.106612e-09 Solve Converged!Without the petsc_options, took 2 epochs of 61 steps 2 Nonlinear |R| = 4.895911e-08% mamba activate ~/mambaforge3/envs/peacock% ~/Documents/Git/moose/python/peacock/peacock -r pressure_diffusion_out.eTutorial 1 Step 3, 4, 5The AD in ADDiffusion is Automatic Differentiation.Remember to use Linux line endings in the .i file.Remember to deactivate peacock and active moose before make.Can deactivate moose after make to execute.% ../babbler-opt -i pressure_diffusion.i/Users/rogerfrye/Documents/Git/babbler/problems/pressure_diffusion.i:12: (Problem/coord_type):The parameter 'coord_type' is deprecated.Please use 'Mesh/coord_type' insteadThe parameter 'rz_coord_axis' is deprecated.Please use 'Mesh/rz_coord_axis' insteadbut if I fix them, I get *** ERROR ***/Users/rogerfrye/Documents/Git/babbler/problems/pressure_diffusion.i:12: section '[Problem/Mesh]' does not have an associated "Action".so don't 0 Nonlinear |R| = 1.015517e-03      0 Linear |R| = 1.015517e-03      1 Linear |R| = 4.699846e-05      2 Linear |R| = 1.279933e-06      3 Linear |R| = 4.753791e-08      4 Linear |R| = 3.223472e-09 1 Nonlinear |R| = 3.223472e-09      0 Linear |R| = 3.223472e-09      1 Linear |R| = 2.279467e-10      2 Linear |R| = 1.880480e-11      3 Linear |R| = 8.595305e-13      4 Linear |R| = 6.729179e-14      5 Linear |R| = 3.290027e-15 2 Nonlinear |R| = 3.289937e-15Much better convergence, but that's probably not the point.Tutorial 1 Step 6, 7% time ./babbler-opt -i test/tests/kernels/simple_diffusion/simple_diffusion.i2 Nonlinear |R| = 1.351534e-11./babbler-opt -i test/tests/kernels/simple_diffusion/simple_diffusion.i  0.11s user 0.03s system 95% cpu 0.140 totalmpiexec -n 1 ./babbler-opt -i   0.10s user 0.03s system 52% cpu 0.265 totalmpiexec -n 2 ./babbler-opt -i   0.22s user 0.07s system 127% cpu 0.230 totalmpiexec -n 2 ./babbler-opt -i   0.23s user 0.06s system 135% cpu 0.210 totalmpiexec -n 2 ./babbler-opt -i   0.23s user 0.06s system 134% cpu 0.213 totalmpiexec -n 4 ./babbler-opt -i   0.45s user 0.13s system 257% cpu 0.226 totalmpiexec -n 4 ./babbler-opt -i   0.45s user 0.13s system 252% cpu 0.232 totalmpiexec -n 4 ./babbler-opt -i   0.44s user 0.13s system 312% cpu 0.181 totalmpiexec -n 8 ./babbler-opt -i   0.89s user 0.42s system 481% cpu 0.272 totalmpiexec -n 8 ./babbler-opt -i   0.91s user 0.46s system 423% cpu 0.323 totalmpiexec -n 8 ./babbler-opt -i   0.89s user 0.38s system 596% cpu 0.213 totalmpiexec -n 1 ./babbler-opt -i  --n-threads=4  0.11s user 0.03s system 91% cpu 0.159 totalmpiexec -n 1 ./babbler-opt -i  --n-threads=8  0.11s user 0.04s system 96% cpu 0.157 totalmpiexec -n 1 ./babbler-opt -i  --n-threads=10  0.12s user 0.04s system 83% cpu 0.197 totalmpiexec -n 1 ./babbler-opt -i  --n-threads=20  0.13s user 0.09s system 104% cpu 0.217 totalmpiexec -n 1 ./babbler-opt -i  --n-threads=40  0.18s user 0.60s system 292% cpu 0.266 totalmpiexec -n 2 ./babbler-opt -i  --n-threads=4  0.23s user 0.09s system 156% cpu 0.201 totalIt doesn't look like varying number of processes does much.For such an easy problem, it's hard to say, but it looks like --n-threads=8 is best.I am tracking CPU History, CPU Usage and GPU history in Activity MonitorMy Apple M1 has 2 Efficiency Cores plus 8 Performance Cores. Not showing much.And I doubt that moose uses Apple GPU since PETSc doesn't.I should have doen timing on pressure_diffusion.i with 1000 elements not 100.4/29/2023AContinue Tutorial 1, Step 7.The instructions sayThe -r 4 option will split each quadrilateral element into 4 elements, 4 timesso 4^4 = 256 tims larger.-rw-r--r--  1 rogerfrye  staff    14M Apr 30 06:22 pressure_diffusion_out.eTry to target 20K DOF per process.% ../babbler-opt -i pressure_diffusion.i -r 4 --timing  Nodes:                   257761  Elems:                   256000  Num DOFs:                257761  Num Local DOFs:          257761Total 7.783, Solve 4.578so my times are slightly slower than theirs for this run, but comparable.They used Dell XPS 8940 with Intel Core i7-11700K (8-Core, 16-Thread, 16M Cache, 3.6-5.0GHz)  Num Local DOFs:          128968mpiexec -n 2 Total 5.617, Solve 2.421, cpu 5.891 totalmpiexec -n 4 Total 4.205, Solve 1.298, cpu 4.468 totalmpiexec -n 4 --n-threads=2 Total 3.613, Solve  0.860 cpu 3.848 totalmpiexec -n 5 --n-threads=2 Total 3.694, Solve 0.832 cpu 3.900 total  Num Local DOFs:          32382mpiexec -n 8 Total 3.710, Solve 0.737, cpu 3.980 totalTry -r 5 = 2^10 = 1024 times larger; shows as spike in my performance cores.-rw-r--r--  1 rogerfrye  staff    55M Apr 30 06:29 pressure_diffusion_out.e  Elems:                       Total:                 1024000  Num DOFs:                1027521  Num Local DOFs:          128774mpiexec -n 8 Total 15.704, Solve 2.933, cpu 16.261 totalmpiexec -n 4 --n-threads=2 Total 15.233, Solve 3.148 cpu 15.637 total  Num Local DOFs:          128774mpiexec -n 8 --n-threads=2 Total 15.818, Solve 2.957 cpu 16.323 totalmpiexec -n 4 --n-threads=2 Total 15.119, Solve 3.124 cpu 15.573 totalmpiexec -n 2 --n-threads=4 Total 15.582, Solve 3.379 cpu 16.042 totalmpiexec -n 4 --n-threads=4 Total 15.132, Solve 3.042 cpu 15.571 totalTry -r 6 = 2^12 = 4096 times larger-rw-r--r--  1 rogerfrye  staff   219M Apr 30 06:08 pressure_diffusion_out.e Elems:                       Total:                 4096000  Num DOFs:                4103041  Num Local DOFs:          1026480mpiexec -n 4 --n-threads=2 Total 64.584, Solve 12.725 cpu 1:05.84 totalmpiexec -n 4 --n-threads=2 Total 64.313, Solve 12.592 cpu 1:05.56 total  Num DOFs:                4103041  Num Local DOFs:          513674mpiexec -n 8 (1 thread) Total 68.174, Solve 12.084 cpu 1:06.31 totalmpiexec -n 5 --n-threads=2 Total 65.001, Solve 12.195 cpu 1:05.56 totalTry -r 1 = 4^1 = 2^2 = 4 times larger-rw-r--r--  1 rogerfrye  staff   266K Apr 30 06:33 pressure_diffusion_out.e  Elems:                       Total:                 4000  Num DOFs:                4221  Num Local DOFs:          1077mpiexec -n 4 --n-threads=2 Total 0.131, Solve 0.071 cpu 0.270 totalTry -r 0 = 4^0 =1 times larger-rw-r--r--  1 rogerfrye  staff    96K Apr 30 06:40 pressure_diffusion_out.e-rw-r--r--   1 rogerfrye  staff  98056 Apr 30 06:40 pressure_diffusion_out.e  Elems:                       Total:                 1000  Num DOFs:                1111  Num Local DOFs:          286mpiexec -n 4 --n-threads=2 Total 0.074, Solve 0.044 cpu 0.240 totalI conclude that for my Apple M1 with 2 Efficiency and 8 Performance coresI get best overall performace with -n4 --n-threads=2 even though PerfGraph reports longer solve time.and the time command tells me that, so I don't need PerfGraph for totals.Tutorial 1 Step 8 Regression Test.I just read this. Can do later if actually producing a product.Tutorial 1 Step 9 Develop a Material Object